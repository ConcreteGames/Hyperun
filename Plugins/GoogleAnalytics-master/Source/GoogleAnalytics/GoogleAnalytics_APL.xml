<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Google Analytics Provider
    Created by Patryk Stepniewski
    Copyright (c) 2014-2016 gameDNA studio. All Rights Reserved.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <init>
	<log text="GoogleAnalytics init"/>
  </init>

  <AARImports>
	<insert>
com.google.android.gms,play-services-analytics,9.2.0
	</insert>
</AARImports>
  
  <!-- optional additions to the GameActivity imports in GameActivity.java -->
  <gameActivityImportAdditions>
	<insert>
	  import com.google.android.gms.analytics.GoogleAnalytics;
	  import com.google.android.gms.analytics.Tracker;
	  import com.google.android.gms.analytics.HitBuilders;
	  import com.google.android.gms.analytics.Logger.LogLevel;
	</insert>
  </gameActivityImportAdditions>

  <androidManifestUpdates>
	<addElements tag="application">
	  <receiver android:name="com.google.android.gms.analytics.AnalyticsReceiver" android:enabled="true">
		<intent-filter>
		  <action android:name="com.google.android.gms.analytics.ANALYTICS_DISPATCH" />
		</intent-filter>
	  </receiver>
	  <service android:name="com.google.android.gms.analytics.AnalyticsService"
        android:enabled="true" android:exported="false" />
	  <receiver android:name="com.google.android.gms.analytics.CampaignTrackingReceiver"
        android:exported="true">
		<intent-filter>
		  <action android:name="com.android.vending.INSTALL_REFERRER" />
		</intent-filter>
	  </receiver>
	  <service android:name="com.google.android.gms.analytics.CampaignTrackingService" />
	</addElements>
  </androidManifestUpdates>

  <!-- optional additions to the GameActivity class in GameActivity.java -->
  <gameActivityClassAdditions>
	<insert>
	  private Tracker mTracker;
	  synchronized public void AndroidThunkJava_GoogleAnalyticsStartSession(String TrackingId, int DispatchInterval)
	  {
		  try 
		  {
			  if (mTracker == null) 
			  {
				  GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
				  if(analytics != null) 
				  {
					  if(DispatchInterval > 0) 
					  {
						analytics.setLocalDispatchPeriod(DispatchInterval);
					  }
					  mTracker = analytics.newTracker(TrackingId);
					  mTracker.enableAdvertisingIdCollection(true);
					  mTracker.enableExceptionReporting(true);
					  mTracker.setSessionTimeout(300);
				  }
			  }
		  } 
		  catch(Exception e) 
		  {
			e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsRecordScreen(String ScreenName)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  mTracker.setScreenName(ScreenName);
				  mTracker.send(new HitBuilders.ScreenViewBuilder().build());
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsRecordEvent(String Category, String Action, String Label, int Value)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  HitBuilders.EventBuilder eventBuilder = new HitBuilders.EventBuilder();
				  eventBuilder.setCategory(Category).setAction(Action);
				  eventBuilder.setValue(Value);

				  if (!Label.equals(""))
				  {
					eventBuilder.setLabel(Label);
				  }

				  mTracker.send(eventBuilder.build());
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsFlushEvents()
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  GoogleAnalytics.getInstance(getBaseContext()).dispatchLocalHits();
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsSetUserId(String UserId)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  mTracker.set("&amp;uid", UserId);
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public String AndroidThunkJava_GoogleAnalyticsGetUserId()
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  return mTracker.get("&amp;uid");
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
		  return "";
	  }

	  public void AndroidThunkJava_GoogleAnalyticsSetLocation(String Location)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  mTracker.set("&amp;geoid", Location);
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsRecordError(String Description)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  mTracker.send(new HitBuilders.ExceptionBuilder()
				  .setDescription(Description)
				  .setFatal(false)
				  .build());
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }

	  public void AndroidThunkJava_GoogleAnalyticsRecordCurrencyPurchase(String TransactionId, String GameCurrencyType, int GameCurrencyAmount, String RealCurrencyType, float RealMoneyCost, String PaymentProvider)
	  {
		  try 
		  {
			  if(mTracker != null) 
			  {
				  mTracker.send(new HitBuilders.TransactionBuilder()
						  .setTransactionId(TransactionId)
						  .setAffiliation(PaymentProvider)
						  .setRevenue(RealMoneyCost)
						  .setTax(0)
						  .setShipping(0)
						  .setCurrencyCode(RealCurrencyType)
						  .build());

				  mTracker.send(new HitBuilders.ItemBuilder()
						  .setTransactionId(TransactionId)
						  .setName(GameCurrencyType)
						  .setSku(GameCurrencyType)
						  .setCategory(PaymentProvider)
						  .setPrice((RealMoneyCost / GameCurrencyAmount))
						  .setQuantity(GameCurrencyAmount)
						  .setCurrencyCode(RealCurrencyType)
						  .build());
			  }
		  } 
		  catch(Exception e) 
		  {
			  e.printStackTrace();
		  }
	  }
	</insert>
  </gameActivityClassAdditions>
</root>
